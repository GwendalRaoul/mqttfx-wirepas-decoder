# This workflow will build a Java project with Gradle
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    tags:
      - 'v*'
    branches: [ master ]
    
  pull_request:
    branches: [ master ]
  

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2

    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: '11.0.6'

    - name: Grant execute permission for gradlew
      run: chmod +x gradlew

    - name: Build with Gradle
      run: ./gradlew build shadowJar

    - name: Store artifacts
      uses: actions/upload-artifact@v2
      with:
        path: build/libs/mqttfx-wirepas-decoder-*-all.jar

    - name: Copy artifact without version
      run: cp build/libs/mqttfx-wirepas-decoder-*-all.jar ./mqttfx-wirepas-decoder-all.jar

    - name: Create release
      if: startsWith( github.ref, 'refs/tags/v')
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      if: startsWith( github.ref, 'refs/tags/v')
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`
        asset_path: ./mqttfx-wirepas-decoder-all.jar
        asset_name: mqttfx-wirepas-decoder_addon.jar
        asset_content_type: application/zip

